/**********************************/
/*HEADER */
/**********************************/

/* -> justify-content: space-between;<- In order to make 2 elements in flexbox to be on the extremes sides, we use this property */
/* -> height: 9.6rem;<- In order to scroll the page and the header stays stick, we just need to set a fixed height */

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fdf2e9;
  height: 9.6rem;
  padding: 0 4.8rem;
  position: relative;
}
.logo {
  height: 2.2rem;
}

.main-nav-list {
  list-style: none;
  display: flex;
  align-items: center;
  gap: 4.8rem;
}

.main-nav-link:link,
.main-nav-link:visited {
  display: inline-block;
  text-decoration: none;
  color: #333;
  font-weight: 500;
  font-size: 1.8rem;
  transition: background-color 0.3s;
}

.main-nav-link:hover,
.main-nav-link:active {
  color: #cf711f;
}

.main-nav-link.nav-cta:link,
.main-nav-link.nav-cta:visited {
  padding: 1.2rem 2.4rem;
  border-radius: 9px;
  color: #fff;
  background-color: #e67e22;
}
.main-nav-link.nav-cta:hover,
.main-nav-link.nav-cta:active {
  background-color: #cf711f;
}

/**********************************/
/* MOBILE NAV BAR */
/**********************************/

.btn-mobile-nav {
  border: none;
  background: none;
  cursor: pointer;
  display: none;
}

.icon-mobile-nav {
  height: 4.8rem;
  width: 4.8rem;
  color: #333;
}

/* To hide the close icon based on the name inside that differentiate them */
.icon-mobile-nav[name="close-outline"] {
  display: none;
}

/**********************************/
/* STICK NAV BAR */
/**********************************/

/* the properties below will be applied to the header when the .sticky is added in the body */
.sticky .header {
  position: fixed;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 8rem;
  padding-top: 0;
  padding-bottom: 0;
  background-color: rgba(255, 255, 255, 0.97);
  z-index: 999;
  box-shadow: 0 1.2rem 3.2rem rgba(255, 255, 255, 0.3);
}

/* the properties below will be applied to the header when the .sticky is added in the body */
.sticky .section-hero {
  margin-top: 9.6rem;
}

/**********************************/
/*HERO SECTION */
/**********************************/

/* -> background-color:#fdf2e9;<- was applied outside the hero container in order to cover the whole space of the section, otherwise it would have covered only inside the the elements selected inside hero container */
/* To define this color, we used the site Tint & Shade Generator (https://maketintsandshades.com/#e67e22) applying the Primary: #e67e22 we get a pallet of related colors */
/* ->padding: 9.6rem 0;<- space applied between sections top and bottom 9.6rem and left right 0 */
.section-hero {
  background-color: #fdf2e9;
  padding: 4.8rem 0 9.6rem 0;
}

/* To adapt the view of the element based on the user HTML font-size */
/* .test {
  background-color: red;
  padding: 4rem;
  /* max-width: 1000px; */
/* max-width: 50rem;*/ /*50 * 16px*/
/* font-size: 2rem; */
/*} */

/* -> width: 130rem <- will create a scroll bar while ->max-width: 130rem<- will make the layout adapt depending on the browser size */
/* ->margin: 0 auto;<- will adjust the whole container in the center of the view port */
/* -> gap: 9.6rem;<- this property gave space between the columns grid elements */
/* ->padding: 0 3.2rem;<- this padding will add some space and prevent the right and left side from being glued to the users screen */
.hero /*container*/ {
  max-width: 130rem;
  display: grid;
  margin: 0 auto;
  padding: 0 3.2rem;
  grid-template-columns: 1fr 1fr;
  align-items: center;
  gap: 9.6rem;
  /* bakground-size: cover;
  max-height: 100%; */
}

.hero-description {
  font-size: 2rem;
  line-height: 1.6;
  margin-bottom: 4.8rem;
}

/* -> img width: 100% <- Img adapt to the size of the browser */
.hero-img {
  width: 100%;
}

/* -> display: flex; <- make the the both DIV boxes created appear side by side. One is the <DIV> "delivered-imgs" and the other is <p> '250,000+ meals delivered last year!' */
/* -> gap: 1.6rem; is to provide space between the two elements <DIV> <img>"delivered-imgs" and the other is <p> "delivered-text" <- */
/* -> align-items: center;<- is to make both elements aligned vertically side by side */
/* ->margin-top: 8rem; to give space between the the whole DIV container "delivered-meals" which includes <img> and <p> and the container above. <- */
/* CENTER FLEX CONTAINER -> justify-content center */
.delivered-meals {
  display: flex;
  gap: 1.6rem;
  align-items: center;
  margin-top: 8rem;
}

/* -> display: flex; <- make the photos appear side by side */
.delivered-imgs {
  display: flex;
}

/* ->.delivered-imgs img <- In order to access and adjust the imgs properties, we need to go inside the <div> box created "delivered-imgs" and specify that the element is "img" */
/* -> border-radius: 50%; <-In order to make the image perfectly round, it's needed to apply the border-radius: 50%;  */
/* ->  margin-right: -1.5rem; <- to make the imgs slightly overlap one another  we need to apply a margin-right with negative value.*/
.delivered-imgs img {
  height: 4.8rem;
  width: 4.8rem;
  border-radius: 50%;
  margin-right: -1.5rem;
  border: 3px solid #fdf2e9;
}

.delivered-imgs img:last-child {
  margin: 0;
}

.delivered-text {
  font-size: 1.8rem;
  font-weight: 600;
}

.delivered-text span {
  color: #cf711f;
}

/**********************************/
/*FEATURED IN */
/**********************************/

.section-featured {
  padding: 4.8rem 0 3.2rem 0;
}

.heading-featured-in {
  font-size: 1.4rem;
  text-transform: uppercase;
  letter-spacing: 0.75px;
  font-weight: 500;
  text-align: center;
  margin-bottom: 2.4rem;
  color: #888;
}

/* ->display: flex <- to make each logo side by side. For it we need to select the div (container) logo. */
/* -> justify-content: space-between; <- will give a nice gap between the imgs, instead of using gap */
/* -> justify-content: space-around; <- even better will also give space in extreme left and right os the logos */
.logos {
  display: flex;
  justify-content: space-around;
  /* justify-content: space-between; */
  /* gap: 3.2rem; */
}

/* -> filter: brightness(0);<- will transform equally all logos colors into a black*/
/* ->  opacity: 50%; <- opacity will help to get to the right gray shade */
.logos img {
  height: 3.2rem;
  filter: brightness(0);
  opacity: 50%;
}

/**********************************/
/*HOW IT WORKS SECTION */
/**********************************/

/* -> background-color: orangered;<- To make the background color cover the page we need to add the property to the parent */
.section-how {
  padding: 9.6rem 0;
}

.step-number {
  font-size: 8.6rem;
  font-weight: 600;
  color: #ddd;
  margin-bottom: 1.2rem;
}

.step-description {
  font-size: 1.8rem;
  line-height: 1.8;
}

.step-img-box {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* -> position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) <-;
  Study more this topic not clear */
/* before can be used only once */
.step-img-box::before,
.step-img-box::after {
  content: "";
  display: block;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* z-index: -1; Negative values to lower the priority and so the other the imgs will appear  */
.step-img-box::before {
  width: 60%;
  /* height: 60%; */
  padding-bottom: 60%;
  background-color: #fdf2e9;
  z-index: -2;
}

.step-img-box::after {
  width: 45%;
  /* height: 60%; */
  padding-bottom: 45%;
  background-color: #fae5d3;
  z-index: -1;
}

.step-img {
  width: 35%;
}

/**********************************/
/*MEALS SECTION */
/**********************************/

.section-meals {
  padding: 9.6rem 0;
}

/* -> overflow: hidden; <- as we have a image floating on the to top of the box, it didn't get the border radiuos. implementing the "overflow: hidden", the shadow will apply on the 4 corners and ignore any other floating elements*/
.meal {
  box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);
  border-radius: 11px;
  overflow: hidden;
  transition: all 0.4s;
}

/* This property is to bring motion to the box and change a little the shadow while the user hover it. */
/* to add transition to it, the transition property should be applied to the parent, in this case > .meal, as above */
.meal:hover {
  transform: translateY(-1rem);
  box-shadow: 0 3.2rem 6.4rem rgba(0, 0, 0, 0.06);
}

/* This new div will wrap the content below the image in order to add padding without affect the image */
.meal-content {
  padding: 3.2rem 4.8rem 4.8rem 4.8rem;
}

/* This margin-bottom wasn't working. As we transformed the tag in  display: inline-block; I added the margin-bottom inside the element .tag */
.meal-tags {
  margin-bottom: 2rem;
  display: flex;
  gap: 0.4rem;
}

.tag {
  display: inline-block;
  padding: 0.4rem 0.8rem;
  margin-bottom: 2rem;
  font-size: 1.2rem;
  text-transform: uppercase;

  color: #333;
  border-radius: 100px;
  font-weight: 600;
}

.tag--vegetarian {
  background-color: #51cf66;
}

.tag--vegan {
  background-color: #94d82d;
}

.tag--paleo {
  background-color: #ffd43b;
}

.meal-title {
  font-size: 2.4rem;
  color: #333;
  font-weight: 600;
  margin-bottom: 3.2rem;
}

/* ***** SWITCHING FLEX DIRECTION TO ADD GAP VERTICALLY ******* */
/* 
1- align-items aligns items horizontally, no longer vertically 
2- justify-content: aligns items vertically no longer horizontally
3- gap acts like margin-bottom, no longer margin-right
*/
/* ->list-style: none;<- remove the bullets from the item list  */
/* -> display: flex;<- this is the UL the parent of li, which will make display the items side by side */
/* -> flex-direction: column; <- will make the item into a column again */
/* ->gap: 2rem; <- will apply the gap between and we won't need to remove from bottom of the last element */
.meal-atributes {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.meal-atribute {
  font-size: 1.8rem;
  display: flex;
  align-items: center;
  gap: 1.6rem;
}

/* for icons we usually 2.4rem default, height and width */
/* to color the icons it will depend on how it's treated. Sometime it'll be needed to use either stroke or color, color if they are treated as strings */
.meal-icon {
  height: 2.4rem;
  width: 2.4rem;
  /* stroke: #e67e22; */
  color: #e67e22;
}

.meal-img {
  width: 100%;
}

.all-recipes {
  text-align: center;
  font-size: 1.8rem;
}

/**********************************/
/*TESTIMONIALS SECTION */
/**********************************/

.section-testimonial {
  background-color: #fdf2e9;
  display: grid;
  grid-template-columns: 55fr 45fr;
  align-items: center;
}

.testimonial-container {
  padding: 9.6rem;
}

.testimonials {
  display: grid;
  grid-template-columns: 1fr 1fr;
  row-gap: 4.8rem;
  column-gap: 8rem;
}

.testimonial-img {
  width: 6.4rem;
  border-radius: 50%;
  margin-bottom: 1.2rem;
}

.testimonial-text {
  font-size: 1.8rem;
  line-height: 1.8;
  margin-bottom: 1.6rem;
}

.testimonial-name {
  font-size: 1.6rem;
  color: #6f6f6f;
}

.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.6rem;
  padding: 1.6rem;
}

/* This property works as a complement of the gallery-item img:hover. which instead of the effect make the img flow externally the parent, it will overflow inside the parent keeping the same size */
.gallery-item {
  overflow: hidden;
}

/* width: 100%; <- will make the img size flexible and adaptable for the page */
.gallery-item img {
  display: block;
  width: 100%;
  transition: all 0.4s;
}

.gallery-item img:hover {
  /* transform: rotate(45deg); */
  transform: scale(1.1);
  opacity: 100;
}

/* This property will make the rest of the img without hover to reduce the brightness  */
.gallery:has(.gallery-item img:hover) img:not(:hover) {
  opacity: 0.75;
}

/**********************************/
/*PRICING SECTION */
/**********************************/

.section-pricing {
  padding: 9.6rem 0 4.8rem;
}

.plan-header {
  text-align: center;
  margin-bottom: 4.8rem;
}

.pricing-plan {
  border-radius: 11px;

  width: 75%;
}

/* justify-self: end; <- used because we needed to justify (horizontally only one column of the grid) */
.pricing-plan--starter {
  justify-self: end;
  border: 2px solid #fdf2e9;
  padding: 4.6rem;
}

/* -> overflow: hidden; <- will prevent the borders of the tag created below from overflowing the both parent. It will be shown only inside the parent  */
.pricing-plan--complete {
  background-color: #fdf2e9;
  padding: 4.8rem;
  position: relative;
  overflow: hidden;
}

.pricing-plan--complete::after {
  content: "Best value";
  position: absolute;
  top: 6%;
  right: -18%;
  text-transform: uppercase;
  font-size: 1.4rem;
  color: #333;
  font-weight: 700;
  background-color: #ffd43b;
  padding: 0.8rem 8rem;
  transform: rotate(45deg);
}

.plan-name {
  color: #cf711f;
  font-weight: 600;
  font-size: 2rem;
  text-transform: uppercase;
  letter-spacing: 0.75;
  margin-bottom: 3.2rem;
}

.plan-price {
  font-size: 6.2rem;
  font-weight: 600;
  color: #333;
  margin-bottom: 1.6rem;
}

.plan-price span {
  font-size: 3rem;
  font-weight: 500;
  margin-right: 0.8rem;
}

.plan-text {
  font-size: 1.6rem;
  line-height: 1.6;
  color: #6f6f6f;
}

.plan-sign-up {
  text-align: center;
  margin-top: 4.8rem;
}

.plan-details {
  font-size: 1.6rem;
  line-height: 1.6;
  text-align: center;
}

/* To create a background around the ICON we just need to add the following properties::after
  background-color: #fdf2e9;
  padding: 1.6rem;
  border-radius: 50%; */
.feature-icon {
  color: #e67e22;
  height: 3.2rem;
  width: 3.2rem;
  margin-bottom: 3.2rem;
  background-color: #fdf2e9;
  padding: 1.6rem;
  border-radius: 50%;
}

.feature-title {
  font-size: 2.4rem;
  color: #333;
  font-weight: 700;
  margin-bottom: 1.6rem;
}

.feature-text {
  font-size: 1.8rem;
  line-height: 1.8;
}

/**********************************/
/* CTA SECTION */
/**********************************/

.section-cta {
  padding: 4.6rem 0 12.8rem 0;
}

/* Gradient background works as if it was a image. that's what the property background-image: which will receive two colors background-image: linear-gradient(#e67e22, red); 
-> background-image: linear-gradient(#e67e22, red);<- 
The first color starts from the top and the second on the bottom. 
To change the direction we can add how many degrees we the gradient to rotate.
background-image: linear-gradient(90deg,#e67e22, red);
We can also use TO RIGHT, TO LEFT, TO RIGHT BOTTOM
background-image: linear-gradient(to right bottom, #e67e22, red);}
*/
.cta {
  display: grid;
  grid-template-columns: 2fr 1fr;
  /* background-color: #e67e22; */
  box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.15);
  border-radius: 11px;

  /* background-image: linear-gradient(90deg, #e67e22, red); */
  background-image: linear-gradient(to right bottom, #eb984e, #e67e22);
  /* height: 50rem; */
  overflow: hidden;
}

.cta-text-box {
  padding: 4.8rem 6.4rem 6.4rem 6.4rem;
  color: #45260a;
}

.cta .heading-secundary {
  color: #45260a;
  margin-bottom: 3.2rem;
}

.cta-text {
  font-size: 1.8rem;
  line-height: 1.8;
}

/*  background-image: linear-gradient to right bottom,
      rgba(235, 151, 78, 0.35),
      rgba(230, 125, 34, 0.35) 
      this is to aplly and opacity on the image and reduce the bright */
/* background-size: cover; to adjust the img to the box container */
.cta-img-box {
  background-image: linear-gradient(
      to right bottom,
      rgba(235, 151, 78, 0.35),
      rgba(230, 125, 34, 0.35)
    ),
    url("../img/eating.jpg");
  background-size: cover;
  background-position: center;
}

.cta-form {
  display: grid;
  grid-template-columns: 1fr 1fr;
  column-gap: 3.2rem;
  row-gap: 2.4rem;
  padding-top: 2.4rem;
}

.cta-form label {
  display: block;
  font-size: 1.6rem;
  font-weight: 500;
  margin-bottom: 1.2rem;
}

.cta-form input,
.cta-form select {
  width: 100%;
  padding: 1.2rem;
  font-size: 1.8rem;
  font-family: inherit;
  color: inherit;
  border: none;
  background-color: #fdf2e9;
  border-radius: 9px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.01);
}

.cta-form input::placeholder {
  color: #aaa;
}

/* this property will change the color only inside the forms */
.cta *:focus {
  outline: none;
  box-shadow: 0 0 0 0.8rem rgba(253, 242, 233, 0.5);
}

/**********************************/
/* FOOTER SECTION */
/**********************************/

.footer {
  padding: 12.8rem 0;
  border-top: 1px solid #eee;
}

.grid--footer {
  grid-template-columns: 1.5fr 1.5fr 1fr 1fr 1fr;
}

.logo-col {
  display: flex;
  flex-direction: column;
}

.footer-logo {
  display: block;
  margin-bottom: 3.2rem;
}

.social-links {
  list-style: none;
  display: flex;
  gap: 2.4rem;
}

.social-icon {
  height: 2.4rem;
  width: 2.4rem;
}

/* -> margin-top: auto; <- after making the parent a flex display, will create the sufficient space on top of the copyright text and it will appear aligned to the bottom of the grid container */
.copyright {
  font-size: 1.4rem;
  line-height: 1.6rem;
  color: #767676;
  margin-top: auto;
}

.footer-heading {
  font-size: 1.8rem;
  font-weight: 500;
  margin-bottom: 4rem;
}
.contacts {
  font-style: normal;
  font-size: 1.6rem;
  line-height: 1.6;
}

.footer-nav {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 2.4rem;
}

.address {
  margin-bottom: 2.4rem;
}

.footer-link:link,
.footer-link:visited {
  text-decoration: none;
  font-size: 1.6rem;
  color: #767676;
  transition: all 0.3s;
}

.footer-link:hover,
.footer-link:active {
  color: #555;
}
